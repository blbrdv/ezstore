name: 'Innit'
outputs:
  cache-hit:
    description: True if cache was hit
    value: ${{ steps.cache.outputs.cache-hit }}
runs:
  using: 'composite'
  steps:
    - id: cache
      uses: actions/cache/restore@v4
      with:
        path: |
          %USERPROFILE%\go
          %LocalAppData%\go-build
          %LocalAppData%\golangci-lint
        key: ${{ runner.os }}-${{ runner.arch }}-go-${{ hashFiles('.\go.mod', '.\.build\go.mod', '.\.build\golangci-lint\go.mod') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-go-

    - if: steps.cache.outputs.cache-hit != 'true'
      id: go
      shell: pwsh
      run: |
        $NeedInstall = 'true';

        try {
          (& go version) -match '^go version (go)?([.0-9]+)' > $null;
          $GoInstalledVersion = $Matches[2];
          echo "Go installed version: '$GoInstalledVersion'";

          $GoNeededVersion = & go list -f '{{.GoVersion}}' -m;
          echo "Go needed version:    '$GoNeededVersion'";

          if ( $GoNeededVersion -eq $GoInstalledVersion ) {
            $NeedInstall = 'false';
          }
        } finally {
          if ( $NeedInstall -eq 'true' ) {
            echo "Need to setup Go";
          } else {
            echo "No need for Go setup";
          }
          echo "need-install=$NeedInstall" >> $env:GITHUB_OUTPUT;
        }

    - if: steps.cache.outputs.cache-hit != 'true' && steps.go.outputs.need-install == 'true'
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: false

    - if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: .\run.ps1 help > $null;

    - shell: pwsh
      run: |
        ls %USERPROFILE%\go;
        ls %LocalAppData%\go-build;
        ls %LocalAppData%\golangci-lint;

version: "2"

linters:
  enable:
    - errcheck
    - govet
    - staticcheck
    - unconvert
    - usestdlibvars

  settings:
    errcheck:
      # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
      # Such cases aren't reported by default.
      # Default: false
      check-type-assertions: true

      # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
      # Such cases aren't reported by default.
      # Default: false
      check-blank: true

      # To disable the errcheck built-in exclude list.
      # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details.
      # Default: false
      disable-default-exclusions: false

      # List of functions to exclude from checking, where each entry is a single function to exclude.
      # See https://github.com/kisielk/errcheck#excluding-functions for details.
      exclude-functions: []

      # Display function signature instead of selector.
      # Default: false
      verbose: true

    govet:
      # Disable all analyzers.
      # Default: false
      disable-all: false

      # Enable analyzers by name.
      # (In addition to default:
      #   appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas,
      #   framepointer, httpresponse, ifaceassert, loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog,
      #   stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr,
      #   unusedresult
      # ).
      # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers.
      # Default: []
      enable:
        - shadow

      # Enable all analyzers.
      # Default: false
      enable-all: false

      # Disable analyzers by name.
      # (In addition to default
      #   atomicalign, deepequalerrors, fieldalignment, findcall, nilness, reflectvaluecompare, shadow, sortslice,
      #   timeformat, unusedwrite
      # ).
      # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers.
      # Default: []
      disable: []

      # Settings per analyzer.
      settings:
        # Analyzer name, run `go tool vet help` to see all analyzers.
        printf:
          # Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`).
          # Default: []
          funcs:
            - (github.com/blbrdv/ezstore/internal/log).Tracef
            - (github.com/blbrdv/ezstore/internal/log).Debugf
            - (github.com/blbrdv/ezstore/internal/log).Infof
            - (github.com/blbrdv/ezstore/internal/log).Warningf
            - (github.com/blbrdv/ezstore/internal/log).Errorf

        shadow:
          # Whether to be strict about shadowing; can be noisy.
          # Default: false
          strict: true

        unusedresult:
          # Comma-separated list of functions whose results must be used.
          # (In addition to default:
          #   context.WithCancel, context.WithDeadline, context.WithTimeout, context.WithValue, errors.New, fmt.Errorf,
          #   fmt.Sprint, fmt.Sprintf, sort.Reverse
          # ).
          # Default: []
          funcs: []

          # Comma-separated list of names of methods of type func() string whose results must be used.
          # (In addition to default Error,String).
          # Default: []
          stringmethods: []

    staticcheck:
      # https://staticcheck.dev/docs/configuration/options/#dot_import_whitelist
      # Default: ["github.com/mmcloughlin/avo/build", "github.com/mmcloughlin/avo/operand", "github.com/mmcloughlin/avo/reg"]
      dot-import-whitelist: []

      # https://staticcheck.dev/docs/configuration/options/#initialisms
      # Default: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
      initialisms: []

      # https://staticcheck.dev/docs/configuration/options/#http_status_code_whitelist
      # Default: ["200", "400", "404", "500"]
      http-status-code-whitelist: []

      # SAxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks
      # Example (to disable some checks): [ "all", "-SA1000", "-SA1001"]
      # Run `GL_DEBUG=staticcheck golangci-lint run --enable=staticcheck` to see all available checks and enabled by config checks.
      # Default: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
      checks: ["all", "-ST1000", "-ST1001"]

    unconvert:
      # Remove conversions that force intermediate rounding.
      # Default: false
      fast-math: true

      # Be more conservative (experimental).
      # Default: false
      safe: true

    usestdlibvars:
      # Suggest the use of http.MethodXX.
      # Default: true
      http-method: true

      # Suggest the use of http.StatusXX.
      # Default: true
      http-status-code: true

      # Suggest the use of time.Month in time.Date.
      # Default: false
      time-date-month: true

      # Suggest the use of time.Weekday.String().
      # Default: true
      time-weekday: true

      # Suggest the use of time.Month.String().
      # Default: false
      time-month: true

      # Suggest the use of time.Layout.
      # Default: false
      time-layout: true

      # Suggest the use of crypto.Hash.String().
      # Default: false
      crypto-hash: true

      # Suggest the use of rpc.DefaultXXPath.
      # Default: false
      default-rpc-path: true

      # Suggest the use of sql.LevelXX.String().
      # Default: false
      sql-isolation-level: true

      # Suggest the use of tls.SignatureScheme.String().
      # Default: false
      tls-signature-scheme: true

      # Suggest the use of constant.Kind.String().
      # Default: false
      constant-kind: true

issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: false

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false
  new: false

  # Show only new issues created after the best common ancestor (merge-base against HEAD).
  # Default: ""
  new-from-merge-base: ""

  # Show only new issues created after git revision `REV`.
  # Default: ""
  new-from-rev: ""

  # Show only new issues created in git patch with set file path.
  # Default: ""
  new-from-patch: ""

  # Show issues in any part of update files (requires new-from-rev or new-from-patch).
  # Default: false
  whole-files: false

  # Fix found issues (if it's supported by the linter).
  # Default: false
  fix: false

# Output configuration options.
output:
  # The formats used to render issues.
  formats:
    # Prints issues in a text format with colors, line number, and linter name.
    # This format is the default format.
    text:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      path: stdout

      # Print linter name in the end of issue text.
      # Default: true
      print-linter-name: true

      # Print lines of code with issue.
      # Default: true
      print-issued-lines: true

      # Use colors.
      # Default: true
      colors: true

  # Add a prefix to the output file references.
  # This option is ignored when using `output.path-mode: abs` mode.
  # Default: ""
  path-prefix: ""

  # By default, the report are related to the path obtained by `run.relative-path-mode`.
  # The mode `abs` allows to show absolute file paths instead of relative file paths.
  # The option `output.path-prefix` is ignored when using `abs` mode.
  # Default: ""
  path-mode: ""

  # Order to use when sorting results.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["linter", "file"]
  sort-order:
    - severity
    - file
    - linter

  # Show statistics per linter.
  # Default: true
  show-stats: false

# Options for analysis running.
run:
  # Timeout for total work, e.g. 30s, 5m, 5m30s.
  # If the value is lower or equal to 0, the timeout is disabled.
  # Default: 0 (disabled)
  timeout: 10m

  # The mode used to evaluate relative paths.
  # It's used by exclusions, Go plugins, and some linters.
  # The value can be:
  # - `gomod`: the paths will be relative to the directory of the `go.mod` file.
  # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`).
  # - `cfg`: the paths will be relative to the configuration file.
  # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run.
  # Default: cfg
  relative-path-mode: wd

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1

  # Include test files or not.
  # Default: true
  tests: true

  # List of build tags, all linters use it.
  # Default: []
  build-tags: []

  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: false

  # Define the Go version limit.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.22.
  go: ""

  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # Default: 0 (automatically set to match Linux container CPU quota and
  # fall back to the number of logical CPUs in the machine)
  concurrency: 0
